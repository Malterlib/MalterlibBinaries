#!/bin/bash

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

set -e

cd "$DIR"

if ! [ -e Binaries/Malterlib ] || ! [ -e Malterlib/Core ] ; then
	# Make sure that lfs is installed
	if ! git lfs > /dev/null ; then
		echo Please install git lfs
		exit 1
	fi

	if ! cat ~/.gitconfig | grep 'filter "lfs"' ; then
		git lfs install
	fi

	mkdir -p Binaries

	if [[ "$MalterlibRepoRoot" == "" ]]; then
		MalterlibRepoRoot=https://github.com/Malterlib
		BuildSystemContents=`cat *.MBuildSystem | grep MalterlibRepoRoot || true`
		echo  BuildSystemContents=$BuildSystemContents

		ToMatch='[ \t]*MalterlibRepoRoot[ \t]+(.*)'
		while [[ $BuildSystemContents =~ $ToMatch ]]; do
	  		BuildSystemContents=${BASH_REMATCH[1]}
	  		break
		done

		ToMatch='^"(.*)"$'
		while [[ $BuildSystemContents =~ $ToMatch ]]; do
	  		BuildSystemContents=${BASH_REMATCH[1]}
	  		break
		done
		if [[ "$BuildSystemContents" != "" ]]; then
			MalterlibRepoRoot="$BuildSystemContents"
		fi
	fi

	if ! [ -e Binaries/Malterlib ]; then
		git clone $MalterlibRepoRoot/MalterlibBinaries.git Binaries/Malterlib
	fi

	if ! [ -e Malterlib/Core ]; then
		git clone $MalterlibRepoRoot/Malterlib_Core.git Malterlib/Core
	fi
fi

SysName=$(uname -s)

BinariesDir="$PWD/Binaries/Malterlib"
Command=$1
shift

while true; do

	if [[ $SysName ==  MINGW* ]] || [[ $SysName ==  CYGWIN* ]] || [[ $SysName ==  windows* ]] ; then
		DependencyFile=BuildSystem/Binaries/Binaries.MalterlibDependency

		MToolSourceOnly=true source ./Binaries/Malterlib/MTool.sh

		if [ -e "$DependencyFile" ]; then
			"$MToolExecutable" CheckDependencies Verbose=true "Directory=BuildSystem/Binaries"
		fi

		if ! [ -e BuildSystem/Binaries.updated ]; then
			"$MToolExecutable" DiffCopy "Binaries/Malterlib/General/Windows" "BuildSystem/Binaries/General"
			"$MToolExecutable" DiffCopy "Binaries/Malterlib/*.sh" "BuildSystem/Binaries" "" 0
			"$MToolExecutable" TouchOrCreate "BuildSystem/Binaries.updated"
			ExcludePatterns="*/.git;*/.DS_Store"
			"$MToolExecutable" BuildDependencies "OutputFile=$DependencyFile" "Output:BuildSystem/Binaries.updated" "Input:${BASH_SOURCE[0]}" "Find:Binaries/Malterlib/*;RIF;33;$ExcludePatterns"
		fi

		BinariesDir="$PWD/BuildSystem/Binaries"
	fi

	case "$Command" in
		generate)
			set +e
			"$BinariesDir/Generate.sh" "$@"
			MToolExit=$?
			set -e
			if [[ $MToolExit == 3 ]]; then
				echo MTool potentially updated, running command again
				continue
			fi
		;;
		setup_only)
			exit 0
		;;
		*)
			set +e
			MalterlibTool=true "$BinariesDir/Generate.sh" "$Command" "$@"
			MToolExit=$?
			set -e
			if [[ $MToolExit == 3 ]]; then
				echo MTool potentially updated, running command again
				continue
			fi
	esac

	break

done
